#version 460
#extension GL_GOOGLE_include_directive : enable

#include "ray_tracing.glsl"

layout(set = 0, binding = 1) uniform accelerationStructureEXT acc;

layout(set = 0, binding = 2) uniform sampler2D cdepth;
layout(set = 0, binding = 3) uniform sampler2D albedo;
layout(set = 0, binding = 4) uniform sampler2D normal;
layout(set = 0, binding = 5) uniform sampler2D last_cdepth;
layout(set = 0, binding = 6) uniform sampler2D last_albedo;
layout(set = 0, binding = 7) uniform sampler2D last_normal;

layout(set = 0, binding = 8) uniform isampler2D last_step;
layout(set = 0, binding = 9) uniform usampler2D last_acc;
layout(set = 0, binding = 10) uniform sampler2D last_path_next_origin;
layout(set = 0, binding = 11) uniform sampler2D last_path_next_direction;
layout(set = 0, binding = 12) uniform sampler2D last_path_albedo;
layout(set = 0, binding = 13) uniform sampler2D last_path_normal;
layout(set = 0, binding = 14) uniform sampler2D last_path_direct_light;
layout(set = 0, binding = 15) uniform sampler2D last_direct_light;
layout(set = 0, binding = 16) uniform sampler2D last_output;

layout(set = 0, binding = 17, r8i) uniform iimage2D s_step;
layout(set = 0, binding = 18, r16ui) uniform uimage2D s_acc;
layout(set = 0, binding = 19, rgba32f) uniform image2D s_path_next_origin;
layout(set = 0, binding = 20, rgba16f) uniform image2D s_path_next_direction;
layout(set = 0, binding = 21, rgba16f) uniform image2D s_path_albedo;
layout(set = 0, binding = 22, rgba16f) uniform image2D s_path_normal;
layout(set = 0, binding = 23, rgba16f) uniform image2D s_path_direct_light;
layout(set = 0, binding = 24, rgba16f) uniform image2D s_direct_light;
layout(set = 0, binding = 25, rgba16f) uniform image2D s_output;

layout(location = 0) rayPayloadEXT RayPayload rp;

#include "rt.glsl"

vec3 rt_pos_view(vec2 pos)
{
	return rt_pos_view(pos, texelFetch(cdepth, ivec2(pos), 0).x);
}

vec3 last_pos_view(vec2 pos)
{
	return rt_pos_view(pos, texelFetch(last_cdepth, ivec2(pos), 0).x);
}

float tmin_calc(float z)
{
	return 0.00001 + min((z * 0.1) / il.cam_near, 1.0);
}

void main(void)
{
	vec2 fpos = gl_LaunchIDEXT.xy + vec2(0.5);
	ivec2 pos = ivec2(fpos);
	vec3 view = rt_pos_view(fpos);
	vec3 view_norm = normalize(view);

	vec4 last_view = il.view_cur_to_last * vec4(view, 1.0);
	vec2 last_view_pos = rt_project_point(last_view.xyz).xy;
	ivec2 ilast_view_pos = ivec2(last_view_pos);

	const float repr_dist_tres = 0.5;
	bool repr_success = last_view_pos.x >= 0 && last_view_pos.y >= 0 &&
		last_view_pos.x <= (il.size.x) && last_view_pos.y <= (il.size.y) &&
		length((il.view_inv * vec4(view, 1.0)).xyz - (il.last_view_inv * vec4(last_pos_view(last_view_pos), 1.0)).xyz) < repr_dist_tres &&
		texelFetch(cdepth, pos, 0).x < 0.9999999;

	int rnd = (hash(int(gl_LaunchIDEXT.x)) + hash(int(gl_LaunchIDEXT.y))) % 256;
	vec3 alb = texelFetch(albedo, pos, 0).xyz;
	int last_step = texelFetch(last_step, ilast_view_pos, 0).x;
	uint last_acc = texelFetch(last_acc, ilast_view_pos, 0).x;
	vec3 last_alb = textureLod(last_albedo, last_view_pos, 0).xyz;
	if (!repr_success) {
		last_step = 0;
		last_acc = 0;
	}

	int out_step;
	uint out_acc = last_acc;
	vec3 out_path_next_origin;
	vec3 out_path_next_direction;
	vec3 out_path_albedo;
	vec3 out_path_normal;
	vec3 out_path_direct_light;
	vec3 out_direct_light = textureLod(last_direct_light, last_view_pos, 0).xyz;
	vec3 out_output;

	bool ray_inhibit = false;
	vec3 ray_origin;
	float ray_Tmin;
	vec3 ray_direction;
	if (last_step == 0) {
		ray_origin = view;
		ray_Tmin = tmin_calc(length(ray_origin));
		ray_direction = (il.view_normal * vec4(il.rnd_sun[rnd], 1.0)).xyz;
		out_path_albedo = alb;
		out_path_direct_light = vec3(0.0);
		out_path_next_origin = view;
		vec3 norm = texelFetch(normal, pos, 0).xyz;
		out_path_next_direction = rnd_diffuse_around_rough(view_norm, norm, 0.0, rnd);
		if (dot(norm, ray_direction) <= 0.0)
			ray_inhibit = true;
	}
	if (last_step == 1) {
		ray_origin = (il.view_last_to_cur * vec4(texelFetch(last_path_next_origin, ilast_view_pos, 0).xyz, 1.0)).xyz;
		ray_Tmin = tmin_calc(length(ray_origin));
		ray_direction = (il.view_last_to_cur_normal * vec4(texelFetch(last_path_next_direction, ilast_view_pos, 0).xyz, 1.0)).xyz;
		out_path_albedo = texelFetch(last_path_albedo, ilast_view_pos, 0).xyz;
		out_path_direct_light = texelFetch(last_path_direct_light, ilast_view_pos, 0).xyz;
	}
	if (last_step == 2) {
		ray_origin = (il.view_last_to_cur * vec4(texelFetch(last_path_next_origin, ilast_view_pos, 0).xyz, 1.0)).xyz;
		ray_Tmin = tmin_calc(length(ray_origin));
		ray_direction = (il.view_normal * vec4(il.rnd_sun[rnd], 1.0)).xyz;
		out_path_albedo = texelFetch(last_path_albedo, ilast_view_pos, 0).xyz;
		out_path_direct_light = texelFetch(last_path_direct_light, ilast_view_pos, 0).xyz;
		if (dot((il.view_last_to_cur_normal * vec4(texelFetch(last_path_normal, ilast_view_pos, 0).xyz, 1.0)).xyz, ray_direction) <= 0.0)
			ray_inhibit = true;
	}

	rp.hit = false;
	if (ray_inhibit)
		rp.hit = true;
	else
		traceRayEXT(acc,
			gl_RayFlagsCullBackFacingTrianglesEXT,	// rayFlags
			0xFF,	// cullMask
			0,	// sbtRecordOffset
			0,	// sbtRecordStride
			0,	// missIndex
			ray_origin,	// origin
			ray_Tmin,	// Tmin
			ray_direction,	// direction
			il.cam_near * 2.0,	// Tmax
			0);

	if (last_step == 0) {
		out_step = 1;
		vec3 norm = texelFetch(normal, pos, 0).xyz;
		float align = dot(norm, ray_direction);
		vec3 direct_light = out_path_albedo * max(0.0, align) * (rp.hit ? 0.0 : 1.0) * 2.5;
		out_path_direct_light += direct_light;


		if (sharp_divergence(last_view_pos) > 0.0) {
			if (length(out_direct_light - direct_light) > 0.01)
				out_acc = 0;
		}
		out_direct_light = direct_light;

		vec3 outp = textureLod(last_output, last_view_pos, 0).xyz;
		out_output = irradiance_correct(outp, last_alb, alb);
	}
	if (last_step != 0) {
		out_direct_light = irradiance_correct(out_direct_light, last_alb, alb);
	}
	if (last_step == 1) {
		if (rp.hit) {
			out_step = 2;
			out_path_next_origin = rp.pos;
			out_path_normal = (il.view_normal * vec4(rp.normal, 1.0)).xyz;
			out_path_next_direction = rnd_diffuse_around_rough(ray_direction, out_path_normal, 0.0, rnd);

			out_path_albedo *= rp.albedo;

			vec3 outp = textureLod(last_output, last_view_pos, 0).xyz;
			out_output = irradiance_correct(outp, last_alb, alb);
		} else {
			out_step = 0;
			vec3 outp = textureLod(last_output, last_view_pos, 0).xyz;

			out_path_direct_light += out_path_albedo * env_sample_novoid((il.view_normal_inv * vec4(ray_direction, 1.0)).xyz);

			out_output = irradiance_correct_adv(outp, last_alb, out_path_direct_light, alb, out_acc);
			out_acc++;
		}
	}
	if (last_step == 2) {
		out_step = 1;
		out_path_next_origin = ray_origin;
		out_path_next_direction = (il.view_last_to_cur_normal * vec4(texelFetch(last_path_next_direction, ilast_view_pos, 0).xyz, 1.0)).xyz;

		if (!rp.hit) {
			float align = dot((il.view_last_to_cur_normal * vec4(texelFetch(last_path_normal, ilast_view_pos, 0).xyz, 1.0)).xyz, ray_direction);
			vec3 direct_light = out_path_albedo * max(0.0, align) * 2.5;
			out_path_direct_light += direct_light;
		}

		vec3 outp = textureLod(last_output, last_view_pos, 0).xyz;
		out_output = irradiance_correct(outp, last_alb, alb);
	}

	if (texelFetch(cdepth, pos, 0).x == 0.0)
		out_output = env_sample_novoid((il.view_normal_inv * vec4(view_norm, 1.0)).xyz);

	imageStore(s_step, pos, ivec4(out_step, 0, 0, 0));
	imageStore(s_acc, pos, uvec4(out_acc, 0, 0, 0));
	imageStore(s_path_next_origin, pos, vec4(out_path_next_origin, 0.0));
	imageStore(s_path_next_direction, pos, vec4(out_path_next_direction, 0.0));
	imageStore(s_path_albedo, pos, vec4(out_path_albedo, 0.0));
	imageStore(s_path_normal, pos, vec4(out_path_normal, 0.0));
	imageStore(s_path_direct_light, pos, vec4(out_path_direct_light, 0.0));
	imageStore(s_direct_light, pos, vec4(out_direct_light, 0.0));
	imageStore(s_output, pos, vec4(out_output, 1.0));
}