#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_KHR_shader_subgroup_basic : enable

#include "illum.glsl"
#include "ray_tracing.glsl"

layout(set = 0, binding = 1) uniform accelerationStructureEXT acc;

//#include "rtbp.glsl"
#include "rt.glsl"

layout(set = 0, binding = 2, rgba16f) uniform image2DArray s_diffuse_cur;
layout(set = 0, binding = 3, rgba16f) uniform image2DArray s_diffuse;
layout(set = 0, binding = 4, r32f) uniform image2D s_diffuse_acc;
layout(set = 0, binding = 5, rgba16f) uniform image2D s_direct_light_cur;
layout(set = 0, binding = 6, rgba16f) uniform image2D s_direct_light;
layout(set = 0, binding = 7, r32f) uniform image2D s_direct_light_acc;
layout(set = 0, binding = 8, rgba16f) uniform image2D s_output;

layout(set = 0, binding = 9) uniform sampler2D cdepth;
layout(set = 0, binding = 10) uniform sampler2D albedo;
layout(set = 0, binding = 11) uniform sampler2D normal;
layout(set = 0, binding = 12) uniform sampler2D normal_geom;
layout(set = 0, binding = 13) uniform sampler2D last_cdepth;
layout(set = 0, binding = 14) uniform sampler2D last_albedo;
layout(set = 0, binding = 15) uniform sampler2D last_normal;
layout(set = 0, binding = 16) uniform sampler2D last_normal_geom;

layout(set = 0, binding = 17) uniform sampler2DArray last_diffuse;
layout(set = 0, binding = 18) uniform sampler2D last_diffuse_acc;
layout(set = 0, binding = 19) uniform sampler2D last_direct_light;
layout(set = 0, binding = 20) uniform sampler2D last_direct_light_acc;

layout(location = 0) rayPayloadEXT RayPayload rp;

float tmin_calc(float z)
{
	return 0.00001 + min((z * 0.1) / il.cam_near, 1.0);
}

vec3 last_pos_view(vec2 pos)
{
	return rt_pos_view(pos, texelFetch(last_cdepth, ivec2(pos), 0).x);
}

float center_divergence(vec2 pos)
{
	vec2 p = abs(fract(pos) - .5);
	return p.x + p.y;
}

const vec3 basis[3] = {
	vec3((2.0 * sqrt(2.0)) / 3.0, 0.0, 1.0 / 3.0),
	vec3(-sqrt(2.0) / 3.0, sqrt(6.0) / 3.0, 1.0 / 3.0),
	vec3(-sqrt(2.0) / 3.0, -sqrt(6.0) / 3.0, 1.0 / 3.0)
};

vec3 basis_w(vec3 normal)
{
	vec3 res = vec3(
		max(0.0, dot(normal, basis[0])),
		max(0.0, dot(normal, basis[1])),
		max(0.0, dot(normal, basis[2]))
	);
	return res / (res.x + res.y + res.z);
}

void main(void)
{
	vec2 fpos = gl_LaunchIDEXT.xy + vec2(0.5);
	ivec2 pos = ivec2(fpos);
	vec3 view = rt_pos_view(fpos, texelFetch(cdepth, pos, 0).x);
	vec3 view_norm = normalize(view);
	int rnd = (hash(int(gl_LaunchIDEXT.x)) + hash(int(gl_LaunchIDEXT.y))) % 256;

	vec3 sun = (il.view_normal * vec4(il.rnd_sun[rnd], 1.0)).xyz;
	vec3 norm = texelFetch(normal_geom, pos, 0).xyz;

	float direct_light = 0.0;

	traceRayEXT(acc,
		gl_RayFlagsCullBackFacingTrianglesEXT,	// rayFlags
		0xFF,	// cullMask
		0,	// sbtRecordOffset
		0,	// sbtRecordStride
		0,	// missIndex
		view,	// origin
		tmin_calc(length(view)),	// Tmin
		sun,	// direction
		il.cam_near * 2.0,	// Tmax
		0);
	if (!rp.hit)
		direct_light += 1.0;

	vec3 diffuse = vec3(0.0);
	vec3 first_diffuse_dir = rnd_diffuse_around_rough(view_norm, norm, 0.0, rnd);
	{
		vec3 ray_albedo = vec3(1.0);
		vec3 ray_origin = view;
		vec3 ray_dir = first_diffuse_dir;

		for (uint j = 0; j < 2; j++) {
			traceRayEXT(acc,
				gl_RayFlagsCullBackFacingTrianglesEXT,	// rayFlags
				0xFF,	// cullMask
				0,	// sbtRecordOffset
				0,	// sbtRecordStride
				0,	// missIndex
				ray_origin,	// origin
				tmin_calc(length(ray_origin)),	// Tmin
				ray_dir,	// direction
				il.cam_near * 2.0,	// Tmax
				0);
			if (rp.hit) {
				ray_albedo *= rp.albedo;
				ray_origin = rp.pos;
				vec3 dif_normal = rp.normal;
				ray_dir = rnd_diffuse_around(dif_normal, (hash(int(gl_LaunchIDEXT.x)) + hash(int(gl_LaunchIDEXT.y)) + hash(int(-1 - j * 19))) % 256);

				vec3 sun_dir = sun;

				traceRayEXT(acc,
					gl_RayFlagsCullBackFacingTrianglesEXT,	// rayFlags
					0xFF,	// cullMask
					0,	// sbtRecordOffset
					0,	// sbtRecordStride
					0,	// missIndex
					ray_origin,	// origin
					tmin_calc(length(ray_origin)),	// Tmin
					sun_dir,	// direction
					il.cam_near * 2.0,	// Tmax
					0);
				if (!rp.hit)
					diffuse += ray_albedo * max(0.0, dot(sun_dir, dif_normal)) * 2.5;
			} else {
				diffuse += ray_albedo * env_sample_novoid((il.view_normal_inv * vec4(ray_dir, 1.0)).xyz);
				break;
			}
		}
	}

	diffuse = correct_nan(diffuse);
	vec3 d_w = basis_w(il.rnd_diffuse[rnd]);
	vec3 diffuse_b[3] = {
		diffuse * d_w.x * 3.0,
		diffuse * d_w.y * 3.0,
		diffuse * d_w.z * 3.0
	};
	for (uint i = 0; i < 3; i++)
		imageStore(s_diffuse_cur, ivec3(pos, i), vec4(diffuse_b[i], 0.0));
	imageStore(s_direct_light_cur, pos, vec4(direct_light, vec3(0.0)));

	subgroupMemoryBarrierImage();

	vec4 last_view = il.view_cur_to_last * vec4(view, 1.0);
	vec2 last_view_pos = rt_project_point(last_view.xyz).xy;
	ivec2 ilast_view_pos = ivec2(last_view_pos);

	const float repr_dist_tres = 0.5;
	float repr_dist = length((il.view_inv * vec4(view, 1.0)).xyz - (il.last_view_inv * vec4(last_pos_view(last_view_pos), 1.0)).xyz);
	bool repr_success = last_view_pos.x >= 0 && last_view_pos.y >= 0 &&
		last_view_pos.x <= (il.size.x) && last_view_pos.y <= (il.size.y) &&
		repr_dist < repr_dist_tres;

	vec3 alb = texelFetch(albedo, pos, 0).xyz;

	vec3 out_output = vec3(0.0);

	{
		uint d_ndx = 0;
		if (d_w.y > d_w.x)
			d_ndx = 1;
		if (d_w.z > d_w.y)
			d_ndx = 2;

		vec3 sum[3] = {
			vec3(0.0),
			vec3(0.0),
			vec3(0.0)
		};
		vec3 cval = diffuse_b[d_ndx];
		vec3 nval = texelFetch(normal_geom, pos, 0).xyz;
		vec3 pval = rt_pos_view(fpos, texelFetch(cdepth, pos, 0).x);

		float last_acc = 0.0;
		if (repr_success)
			last_acc = textureLod(last_diffuse_acc, last_view_pos, 0.0).x;

		float cum_w = 0.0;
		int qual = 3;
		/*if (last_acc < 16.0)
			qual = 3;
		if (last_acc == 0.0)
			qual = 6;*/
		int max_it = 1 << qual;
		for(int i = 0; i < max_it; i++) {
			vec2 fuv = clamp(fpos + (vec2(i % qual, i / qual) - float(qual) * 0.5) * 2.5, vec2(0.0), il.size - 1.0);
			ivec2 uv = ivec2(fuv);
			vec3 t;
			float dist2;

			/*t = cval - ctmp;
			dist2 = dot(t, t);
			float c_w = min(1.0 / (dist2 + 0.01), 1.0);*/

			vec3 ntmp = texelFetch(normal_geom, uv, 0).xyz;
			t = nval - ntmp;
			dist2 = max(dot(t, t), 0.0);
			float dist22 = dist2 + 1.0;
			float n_w = min(1.0 / (dist22 * dist22), 1.0);

			/*vec3 ptmp = rt_pos_view(fuv, texelFetch(cdepth, uv, 0).x);
			t = pval - ptmp;
			dist2 = dot(t, t);
			dist22 = dist2 * dist2;
			float p_w = min(1.0 / (dist22 * dist22 + 0.0001), 1.0);*/

			float weight = n_w;// * p_w;//c_w * n_w * p_w;
			for (uint i = 0; i < 3; i++)
				sum[i] += imageLoad(s_diffuse_cur, ivec3(uv, i)).xyz * weight;// * kernel[i];
			cum_w += weight;// * kernel[i];
		}
		for (uint i = 0; i < 3; i++)
			diffuse_b[i] = sum[i] / cum_w;
	}

	float acc_diffuse = 1.0;
	float acc_direct_light = 1.0;
	if (repr_success) {
		if (length(textureLod(last_normal_geom, last_view_pos, 0.0).xyz - texelFetch(last_normal_geom, ilast_view_pos, 0).xyz) < 0.05) {
			{
				float last_acc = textureLod(last_diffuse_acc, last_view_pos, 0.0).x;
				if (last_acc > 0.0) {
					acc_diffuse = last_acc + 1.0;
					for (uint i = 0; i < 3; i++)
						diffuse_b[i] = (textureLod(last_diffuse, vec3(last_view_pos * vec2(il.size_inv.x), i), 0.0).xyz * last_acc + diffuse_b[i]) / acc_diffuse;
				}
			}
			{
				float last_acc = textureLod(last_direct_light_acc, last_view_pos, 0.0).x;
				if (last_acc > 0.0) {
					float last_direct_light = textureLod(last_direct_light, last_view_pos, 0.0).x;
					acc_direct_light = last_acc + 1.0;
					direct_light = (last_direct_light * last_acc + direct_light) / acc_direct_light;
				}
			}
		}
	}

	{
		float div = center_divergence(last_view_pos);
		if (div > 0.01) {
			float basea = min(acc_diffuse, 64.0);
			bool wga = acc_diffuse >= basea;
			acc_diffuse *= mix(1.0 - div, 1.0, 0.9);
			if (wga)
				acc_diffuse = max(acc_diffuse, basea);
			float baseb = min(acc_direct_light, 16.0);
			bool wgb = acc_direct_light >= baseb;
			acc_direct_light *= mix(1.0 - div, 1.0, 0.9);
			if (wgb)
				acc_direct_light = max(acc_direct_light, baseb);
		}
	}

	if (texelFetch(cdepth, pos, 0).x == 0.0) {
		out_output = env_sample_novoid((il.view_normal_inv * vec4(view_norm, 1.0)).xyz);
		for (uint i = 0; i < 3; i++)
			diffuse_b[i] = vec3(0.0);
		acc_diffuse = 0.0;
		direct_light = 0.0;
		acc_direct_light = 0.0;
	}

	vec3 nor = texelFetch(normal, pos, 0).xyz;
	vec3 norm_w = vec3(1.0 / 3.0);
	out_output += (direct_light * max(0.0, dot(nor, il.sun)) * 2.5 + diffuse_b[0] * norm_w.x + diffuse_b[1] * norm_w.y + diffuse_b[2] * norm_w.z) * alb;
	//out_output = diffuse_b[0];

	for (uint i = 0; i < 3; i++)
		imageStore(s_diffuse, ivec3(pos, i), vec4(diffuse_b[i], 0.0));
	imageStore(s_diffuse_acc, pos, vec4(acc_diffuse, vec3(0.0)));
	imageStore(s_direct_light, pos, vec4(direct_light, vec3(0.0)));
	imageStore(s_direct_light_acc, pos, vec4(acc_direct_light, vec3(0.0)));
	imageStore(s_output, pos, vec4(out_output, 0.0));
}