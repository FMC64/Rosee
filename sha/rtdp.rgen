#version 460
#extension GL_GOOGLE_include_directive : enable

#include "illum.glsl"
#include "ray_tracing.glsl"

layout(set = 0, binding = 1) uniform accelerationStructureEXT acc;

#include "rtdp.glsl"
#include "rt.glsl"

layout(set = 0, binding = 6, rgba16f) uniform image2DArray s_probes;

layout(location = 0) rayPayloadEXT RayPayload rp;

float tmin_calc(float z)
{
	return 0.00001 + min((z * 0.1) / il.cam_near, 1.0);
}

void main(void)
{
	ivec2 pos = ivec2(gl_LaunchIDEXT.xy);

	ivec2 probe_pos = pos / probe_diffuse_size_next;
	ivec2 probe_pos_loc = pos % probe_diffuse_size_next;
	ivec2 probe_pos_base = probe_pos * probe_diffuse_size;
	ivec2 pos_out = 1 + probe_pos_base + probe_pos_loc;
	vec3 dir = (il.view_normal * vec4(probe_pos_to_dir(probe_pos_loc), 1.0)).xyz;

	ivec2 offs[8];
	uint off_count = oct_fill_mirror(probe_pos_loc, offs);

	int rnd = (hash(int(gl_LaunchIDEXT.x)) + hash(int(gl_LaunchIDEXT.y))) % 8192;

	for (uint i = 0; i < probe_layer_count; i++) {
		Probe probe = probes_pos.probes[probe_offset(probe_pos, i)];
		vec3 ray_albedo = vec3(1.0);
		vec3 ray_origin = probe.pos;
		vec3 ray_dir = dir;
		vec3 out_probe = vec3(0.0);

		for (uint j = 0; j < 1; j++) {
			if (j == 0 && dot(dir, texelFetch(normal, probe.ipos, 0).xyz) <= 0.0) {
				break;
				rp.hit = true;
				rp.pos = probe.pos;
				rp.albedo = texelFetch(albedo, probe.ipos, 0).xyz;
				rp.normal = (il.view_normal * vec4(texelFetch(normal, probe.ipos, 0).xyz, 1.0)).xyz;
			} else
				traceRayEXT(acc,
					gl_RayFlagsCullBackFacingTrianglesEXT,	// rayFlags
					0xFF,	// cullMask
					0,	// sbtRecordOffset
					0,	// sbtRecordStride
					0,	// missIndex
					ray_origin,	// origin
					tmin_calc(length(ray_origin)),	// Tmin
					ray_dir,	// direction
					il.cam_near * 2.0,	// Tmax
					0);
			if (rp.hit) {
				ray_albedo *= rp.albedo;
				ray_origin = rp.pos;
				vec3 dif_normal = (il.view_normal * vec4(rp.normal, 1.0)).xyz;
				ray_dir = rnd_diffuse_around_rough(ray_dir, dif_normal, 0.0, rnd);

				vec3 sun_dir = (il.view_normal * vec4(il.rnd_sun[rnd], 1.0)).xyz;

				traceRayEXT(acc,
					gl_RayFlagsCullBackFacingTrianglesEXT,	// rayFlags
					0xFF,	// cullMask
					0,	// sbtRecordOffset
					0,	// sbtRecordStride
					0,	// missIndex
					ray_origin,	// origin
					tmin_calc(length(ray_origin)),	// Tmin
					sun_dir,	// direction
					il.cam_near * 2.0,	// Tmax
					0);
				if (!rp.hit) {
					float align = min(dot(sun_dir, dif_normal), 1.0);	// weird clamp ??
					out_probe += ray_albedo * max(align, 0.0) * 2.5;
				}
			} else {
				out_probe += ray_albedo * env_sample_novoid((il.view_normal_inv * vec4(dir, 1.0)).xyz);
				break;
			}
		}

		imageStore(s_probes, ivec3(pos_out, i), vec4(out_probe, 1.0));

		for (uint j = 0; j < 8; j++) {
			if (j >= off_count)
				break;
			imageStore(s_probes, ivec3(probe_pos_base + offs[j], i), vec4(out_probe, 1.0));
		}
	}
}